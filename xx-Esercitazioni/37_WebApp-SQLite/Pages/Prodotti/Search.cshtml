@page  "Search"
@model SearchModel
@using _37_WebApp_SQLite.Models;
@using _37_WebApp_SQLite.Pages.Prodotti;
@using _37_WebApp_SQLite.Utilities;


@{
    ViewData["Title"] = "Cerca Prodotti Paginati";
    //configuriamo il modello per la paginazione.


    var paginationModel = new PaginationModel
    {
        PageIndex = Model.Prodotti.PageIndex,
        TotalPages = Model.Prodotti.TotalPages,
        PageUrl = page => Url.Page("Search", new { q = Model.SearchTerm, pageIndex = page })
    };
}
<h1>Cerca Prodotti</h1>


<form method="get" class="mb-3">
    <div class="input-group">
        <input type="text" name="q" value="@Model.SearchTerm" placeholder="Inserisci il nome del prodotto..." class="form-control"/>
        <button type="submit" class="btn btn-outline-primary">Cerca</button>
    </div>
</form>
@if (Model.Prodotti?.Any() == true)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nome</th>
                <th>Prezzo</th>
                <th>Categoria</th>
                <th>Azioni</th>
            </tr>
        </thead>
        <tbody>
             @foreach (var prodotto in Model.Prodotti)
        {
            <tr>
                <td>@prodotto.Id</td>
                <td>@prodotto.Nome</td>
                <td>@PriceFormatter.Format(prodotto.Prezzo)</td>
                <td>@prodotto.CategoriaNome</td>
                <td>
                     <a asp-page="Dettaglio" asp-route-id="@prodotto.Id" class="btn btn-outline-info">Dettagli</a>
                </td>
            </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Nessun prodotto trovato</p>
}
@await Html.PartialAsync("_Pagination", paginationModel)
